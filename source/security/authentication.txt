.. _php-auth:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: authorize, secure, connect, code example

Overview
--------

This guide describes the mechanisms you can use in the {+driver-short+} to authenticate
users.

.. important:: Percent-Encoding

   You must :wikipedia:`percent-encode <Percent-encoding>` a username and password before
   you include them in a MongoDB URI. To encode these values, you can use the ``rawurlencode()``
   PHP method. For more information, see `rawurlencode <{+php-manual+}/rawurlencode>`__ in
   the PHP manual.

   Don't percent-encode the username or password when passing them to the
   ``MongoDB\Client`` constructor.

.. _php-scram-sha-256:

SCRAM-SHA-256
-------------

SCRAM-SHA-256, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__,
is the default authentication mechanism on MongoDB deployments
running {+mdb-server+} v4.0 or later.

To authenticate with this mechanism, set the following connection options:

- ``username``: The username to authenticate. Percent-encode this value before including
  it in a connection URI.
- ``password``: The password to authenticate. Percent-encode this value before including
  it in a connection URI.
- ``authSource``: The MongoDB database to authenticate against. By default,
  {+driver-short+} authenticates against the database in the connection
  URI, if you include one. If you don't, it authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``SCRAM-SHA-256``.

You can set these options in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $options = [
             'username' => '<username>',
             'password' => '<password>',
             'authSource' => '<authentication database>',
             'authMechanism' => 'SCRAM-SHA-256',
         ];

         $client = new Client(
            'mongodb://<hostname>:<port>',
            $options,
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<username>:<password>@<hostname>:<port>/?authSource=admin&authMechanism=SCRAM-SHA-256';
         $client = new Client($uri);

.. _php-scram-sha-1:

SCRAM-SHA-1
-----------

SCRAM-SHA-1, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__,
is the default authentication mechanism on MongoDB deployments
running {+mdb-server+} v3.6.

To authenticate with this mechanism, set the following connection options:

- ``username``: The username to authenticate. Percent-encode this value before including
  it in a connection URI.
- ``password``: The password to authenticate. Percent-encode this value before including
  it in a connection URI.
- ``authSource``: The MongoDB database to authenticate against. By default, the
  {+php-library+} authenticates against the ``admin`` database.
- ``authMechanism``: Set to ``'SCRAM-SHA-1'``.

You can set these options in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $options = [
             'username' => '<username>',
             'password' => '<password>',
             'authSource' => '<authentication database>',
             'authMechanism' => 'SCRAM-SHA-1',
         ];

         $client = new Client(
            'mongodb://<hostname>:<port>',
            $options,
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<username>:<password>@<hostname>:<port>/?authSource=admin&authMechanism=SCRAM-SHA-1';
         $client = new Client($uri);

.. _php-mongodb-x509:

MONGODB-X509
------------

If you enable TLS, during the TLS handshake, the {+php-library+} can present an X.509
client certificate to MongoDB to prove its identity. The MONGODB-X509 authentication
mechanism uses this certificate to authenticate the client.

To authenticate with this mechanism, set the following connection options:

- ``tls``: Set to ``true``.
- ``tlsCertificateKeyFile``: The file path of the ``.pem`` file that contains your
  client certificate and private key.
- ``authMechanism``: Set to ``'MONGODB-X509'``.

You can set these options in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $options = [
             'tls' => true,
             'tlsCertificateKeyFile' => '<file path>',
             'authMechanism' => 'MONGODB-X509',
         ];

         $client = new Client(
            'mongodb://<hostname>:<port>',
            $options,
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<hostname>:<port>/?tls=true&tlsCertificateKeyFile=<file path>&authMechanism=MONGODB-X509';
         $client = new Client($uri);

.. _php-mongodb-aws:

MONGODB-AWS
-----------

.. important::

   The MONGODB-AWS authentication mechanism requires MongoDB v4.4 or later.

The MONGODB-AWS authentication mechanism uses AWS IAM (Amazon Web Services Identity and
Access Management) or AWS Lambda credentials to authenticate your application. The
{+php-library+} tries to retrieve AWS credentials from the following sources, in the order listed:

1. Named arguments passed to the ``MongoDB\Client`` constructor or parameters in the
   connection URI
#. Environment variables
#. ``AssumeRoleWithWebIdentity`` request to the AWS STS
#. Instance metadata service on an Amazon EC2 instance with an IAM role configured

The following sections describe how to use the {+php-library+} to retrieve credentials from
these sources and use them to authenticate your application.

.. _php-mongodb-aws-credentials:

``MongoDB\Client`` Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, the {+php-library+} checks whether you passed AWS credentials
to the ``MongoDB\Client`` constructor, either as an options parameter or as part of the
connection URI. To pass your credentials to ``MongoDB\Client``,
set the following connection options:

- ``username``: The AWS IAM access key ID to authenticate. Percent-encode this value
  before including it in a connection URI.
- ``password``: The AWS IAM secret access key. Percent-encode this value before including
  it in a connection URI.
- ``authMechanism``: Set to ``'MONGODB-AWS'``.

You can set these options in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through parameters in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $options = [
             'username' => '<AWS IAM access key ID>',
             'password' => '<AWS IAM secret access key>',
             'authMechanism' => 'MONGODB-AWS',
         ];

         $client = new Client(
            'mongodb://<hostname>:<port>',
            $options,
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<AWS IAM access key ID>:<AWS IAM secret access key>@<hostname>:<port>/?authMechanism=MONGODB-AWS';
         $client = new Client($uri);

.. _php-mongodb-aws-env-vars:

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

If you don't provide a username and password when you construct your ``MongoDB\Client``
object, the {+php-library+} tries to retrieve AWS credentials from the following
environment variables:

- ``AWS_ACCESS_KEY_ID``
- ``AWS_SECRET_ACCESS_KEY``
- ``AWS_SESSION_TOKEN``

To use these environment variables to authenticate your application, first set them to the
AWS IAM values needed for authentication, as shown in the following code
example:

.. code-block:: sh

   export AWS_ACCESS_KEY_ID=<AWS IAM access key ID>
   export AWS_SECRET_ACCESS_KEY=<AWS IAM secret access key>
   export AWS_SESSION_TOKEN=<AWS session token>

.. important::
  
   Don't percent-encode the values in these environment variables.

After you set these environment variables, set the ``authMechanism``
connection option to ``'MONGODB-AWS'``.
You can set this option in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $client = new Client(
            'mongodb://<hostname>:<port>',
            ['authMechanism' => 'MONGODB-AWS'],
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS';
         $client = new Client($uri);

.. tip:: AWS Lambda
   
   AWS Lambda runtimes can automatically set these environment variables during
   initialization. For more information about using environment variables in an AWS Lambda
   environment, see
   `Using Lambda environment variables <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime>`__
   in the AWS documentation.

.. _php-mongodb-aws-oidc:

AssumeRoleWithWebIdentity
~~~~~~~~~~~~~~~~~~~~~~~~~

If your application authenticates users for your EKS cluster from an OpenID Connect (OIDC)
identity provider, the {+php-library+} can make an ``AssumeRoleWithWebIdentity`` request
to exchange the OIDC token for temporary AWS credentials for your application. 

To authenticate with temporary AWS IAM credentials returned by an
``AssumeRoleWithWebIdentity`` request, ensure that the AWS config file exists in your
environment and is configured correctly. To learn how to create and configure
an AWS config file, see `Configuration <https://docs.aws.amazon.com/sdkref/latest/guide/creds-config-files.html>`__
in the AWS documentation.

After you configure your environment for an ``AssumeRoleWithWebIdentity`` request,
set the ``authMechanism`` connection option to ``'MONGODB-AWS'``.
You can set this option in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $client = new Client(
            'mongodb://<hostname>:<port>',
            ['authMechanism' => 'MONGODB-AWS'],
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS';
         $client = new Client($uri);

For more information about using an ``AssumeRoleWithWebIdentity`` request to
authenticate your application, see the following AWS documentation:

- `Authenticating users for your cluster from an OpenID Connect identity provider <https://docs.aws.amazon.com/eks/latest/userguide/authenticate-oidc-identity-provider.html>`__
- `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`__

.. _php-mongodb-aws-ec:

ECS Container or EC2 Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your application runs in an Amazon Elastic Cloud Compute (EC2) instance in an 
Elastic Container Service (ECS) container, the {+php-library+} can automatically retrieve
temporary AWS credentials from an ECS endpoint.

To use temporary credentials from within an EC2 instance, set the ``authMechanism``
connection option to ``'MONGODB-AWS'``.
You can set this option in two ways: by passing an options array to the
``MongoDB\Client`` constructor or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoDB\Client
      :tabid: Client

      .. code-block:: php

         $client = new Client(
            'mongodb://<hostname>:<port>',
            ['authMechanism' => 'MONGODB-AWS'],
         );

   .. tab:: Connection String
      :tabid: connectionstring

      .. code-block:: php

         $uri = 'mongodb://<hostname>:<port>/?&authMechanism=MONGODB-AWS';
         $client = new Client($uri);

Additional Information
----------------------

To learn more about creating a ``MongoDB\Client`` object in the {+php-library+},
see the :ref:`php-client` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the ``MongoDB\Client`` class, see :phpclass:`MongoDB\Client` 
in the API documentation.