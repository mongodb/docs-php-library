.. _php-run-command:

======================
Run a Database Command
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: administration, code example

Overview
--------

In this guide, you can learn how to use the {+php-library+}
to run a database command. You can use database commands to perform a
variety of administrative and diagnostic tasks, such as fetching server
statistics, initializing a replica set, or running an aggregation pipeline.

.. important:: Prefer Library Methods to Database Commands

   The library provides wrapper methods for many database commands.
   We recommend using these methods instead of executing database
   commands when possible.
   
   To perform administrative tasks, use the :mongosh:`MongoDB Shell </>`
   instead of the {+php-library+}. Calling the ``db.runCommand()``
   method inside the shell is the preferred way to issue database
   commands, as it provides a consistent interface between the shell and
   drivers or libraries.

.. _php-execute-command:

Execute a Command
-----------------

To run a database command, you must specify the command and any relevant
parameters in a command document, then pass the command document to the
``MongoDB\Database::command()`` method. This method returns a
``Cursor`` object.

The following code shows how you can use the ``command()``
method on a ``MongoDB\Driver\Database`` instance to run the ``hello``
command, which returns information about the current member's role in
the replica set:

.. code-block:: php

   $database = $client->selectDatabase('<db>');
   $result = $database->command(['hello' => 1]);

To find a link to a full list of database commands and corresponding
parameters, see the :ref:`Additional Information section
<php-addtl-info-runcommand>`.

.. note:: Read Preference

   The ``command()`` method does not obey the read preference you might
   have set on your ``Database`` instance elsewhere in your code. By
   default, ``command()`` uses the ``primary`` read preference.
   
   You can set a read preference for command execution by setting one
   in the options parameter, as shown in the following code:
   
   .. code-block:: php

      $readPref = new MongoDB\Driver\ReadPreference('primaryPreferred');
      $result = $database->command(
          ['hello' => 1], 
          ['readPreference' => $readPref]
      );

   For more information on read preference options, see :manual:`Read
   Preference </core/read-preference/>` in the {+mdb-server+} manual.

.. _php-command-response:

Response
--------

The ``command()`` method returns a ``Cursor`` object that contains
the response from the database after the command has been executed.

Each database command performs a different function, so the response
content can vary depending on the command executed. However, every
response contains a document with the following fields:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Field
     - Description

   * - <command result>
     - Fields specific to the database command. For example,
       ``count`` returns the ``n`` field and ``explain`` returns the
       ``queryPlanner`` field.

   * - ``ok``
     - Whether the command has succeeded (``1``)
       or failed (``0``).

   * - ``operationTime``
     - The logical time of the operation. MongoDB uses the
       logical time to order operations. To learn more about this
       concept, see our blog  post about the :website:`Global Logical
       Clock </blog/post/transactions-background-part-4-the-global-logical-clock>`.

   * - ``$clusterTime``
     - A document that contains the signed cluster time. Cluster time is a
       logical time used for the ordering of operations.

       This document contains the following fields:

       - ``clusterTime``, the timestamp of the highest known cluster time for the member
       - ``signature``, a document that contains the hash of the cluster time and the ID
         of the key used to sign the cluster time

.. _php-command-example:

Command Example
---------------

The following example uses the ``command()`` method to run
the ``dbStats`` command to retrieve storage statistics for the
``accounts`` database:

.. literalinclude:: /includes/write/run-command.php
   :language: php
   :dedent:
   :start-after: start-runcommand
   :end-before: end-runcommand

The output of this command includes information about the collections in
the database and describes the amount and size of data stored across
collections:

.. code-block:: none

   string(234) "[{"db":"accounts","collections":2,"views":0,"objects":5,"avgObjSize":22,
   "dataSize":110,"storageSize":8192,"totalFreeStorageSize":0,"numExtents":0,"indexes":2,
   "indexSize":8192,"indexFreeStorageSize":0,"fileSize":0,"nsSizeMB":0,"ok":1}]"

.. _php-addtl-info-runcommand:

Additional Information
----------------------

For more information about the concepts in this guide, see the following
documentation in the {+mdb-server+} manual:

- :manual:`db.runCommand() </reference/method/db.runCommand/>`
- :manual:`Database Commands </reference/command/>`
- :manual:`hello Command </reference/command/hello/>`
- :manual:`dbStats Command </reference/command/dbStats/>`

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the ``command()`` method, see the
following {+php-library+} API documentation:

- `MongoDB\\Database::command() <{+api+}/method/MongoDBDatabase-command/>`__

For more information about the ``Cursor`` and ``ReadPreference`` classes,
see the following {+extension-short+} API documentation:

- `MongoDB\\Driver\\Cursor
  <https://www.php.net/manual/en/class.mongodb-driver-cursor.php>`__
- `MongoDB\\Driver\\ReadPreference
  <https://www.php.net/manual/en/class.mongodb-driver-readpreference.php>`__
